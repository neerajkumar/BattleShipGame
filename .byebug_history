exit
@player2.all_ships_destroyed?
@player1.all_ships_destroyed?
exit
@player1.ships.map(&:destroyed?)
@player2.ships
@player2.ships.map(&:destroyed?)
@player2.ships.map(&:cells).flatten
@player1.ships.map(&:cells).flatten
@player1.ships.map(&:cells)
@player1.ships
@player1
exit
@player2.ships
@player1.ships
@player1
exit
c
@target.ships.last
@target.ships.first
@target.ships.count
@target.ships
@target
c
@target
c
@target.ships.first
@target.ships
@target
exit
ship.cells
ship
exit
cell
exit
c
@target.ships.first.cells.first
@target.ships.first.cells.first.hits
@target.ships.first.cells.first.hits += 1
@target.ships.first.cells.first.hits
@target.ships.first.cells.first
@target.ships.first.cells
@target.ships.first.cells.
@target.ships.first
@target.ships
@target
exit
@target.ships.first.cells
@target.ships.first
@target.ships
@target
exit
c
exit
ship
cell
exit
c
@target.ships.first
@target
c
@target.ships.first
@target.ships
@target
c
@target.ships.first
@target.ships
@target
exit
c
target
target.ships.first
c
exit
target.ships.first
c
target.ships.first
target.ships
target
c
target.ships.first
target.ships
target
exit
target.ships.map(&:cells).flatten.detect { |cell| cell.position.to_s == target_position.to_s }
target.ships.map(&:cells).flatten.detect { |cell| cell.position == target_position }
target_position
battle_ship_cell
target.ships.first
target.ships
target
exit
target
exit
target.ships.map(&:cells).flatten
target.ships.map(&:cells)
target.ships.count
target.ships
exit
@player2.ships.last.cells.count
@player2.ships.last.cells
@player2.ships.second.cells
@player2.ships.first.cells
@player1.ships.first.cells
@player1.ships.last.cells
@player1.ships.last
@player1.ships.count
@player1.ships
@player1
exit
@player2.ships.first.cells
@player1.ships.first.cells
exit
@player1.ships.first.cells
exit
@player1.ships.first.cells
@player1.ships.first
@player1.ships.first.cells
@player1.ships.first
@player1.ships.size.first
@player1.ships.size
@player1.ships
@player1
exit
battleship1
c
@player2
@player1
c
@player2
@player1
c
@player2
@player1
exit
@player_2
@player_1
exit
player_2
player_1
exit
player_2
player_1
exit
@type.to_sym
TYPE.keys
TYPE
@type
c
(@height.to_i > (battle_field.height.ord - 'A'.ord))
(@height.to_i > ('A'.ord - battle_field.height.ord))
"A".ord
battle_field.height.ord
battle_field.height
@height
exit
local_variable_get("player#{index}")
instance_variable_get("player#{index}")
player#{index}
player_#{index}
player_i
index
exit
i
exit
n
l
c
player1
exit
battle_field.height.ord
ship_coordinate_player1.y.ord
ship_coordinate_player1.y.chr
ship_coordinate_player1.y.byte
battle_field.height
ship_coordinate_player1.y
ship_coordinate_player1
ship_coordinate_player1.
ship_coordinate_player1.y.to_i
exit
ship_coordinate_player1.x.to_i
battle_field.width.to_i
ship_coordinate_player1.x.to_i
exit
battle_field
